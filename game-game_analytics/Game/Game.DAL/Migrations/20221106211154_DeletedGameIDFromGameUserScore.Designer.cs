// <auto-generated />
using System;
using Game.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Game.DAL.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20221106211154_DeletedGameIDFromGameUserScore")]
    partial class DeletedGameIDFromGameUserScore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Game.Models.Entity.Card", b =>
                {
                    b.Property<Guid>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackSideText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrontSideText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardID");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Game.Models.Entity.CardDeck", b =>
                {
                    b.Property<Guid>("CardID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("DeckID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CardID", "DeckID");

                    b.HasIndex("DeckID");

                    b.ToTable("CardDecks");
                });

            modelBuilder.Entity("Game.Models.Entity.Deck", b =>
                {
                    b.Property<Guid>("DeckID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeckID");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Game.Models.Entity.Game", b =>
                {
                    b.Property<Guid>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("GameID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Game.Models.Entity.GameUser", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GameID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Left")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "GameID");

                    b.HasIndex("GameID");

                    b.ToTable("GameUsers");
                });

            modelBuilder.Entity("Game.Models.Entity.GameUserAnswer", b =>
                {
                    b.Property<Guid>("GameUserAnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GameUserGameID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameUserUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.HasKey("GameUserAnswerID");

                    b.HasIndex("GameUserUserID", "GameUserGameID");

                    b.ToTable("GameUsersAnswers");
                });

            modelBuilder.Entity("Game.Models.Entity.GameUserScore", b =>
                {
                    b.Property<Guid>("GameUserAnswerID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CardID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GameUserGameID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameUserUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("GameUserAnswerID", "CardID");

                    b.HasIndex("CardID");

                    b.HasIndex("GameUserUserID", "GameUserGameID");

                    b.ToTable("GameUsersScores");
                });

            modelBuilder.Entity("Game.Models.Entity.Organization", b =>
                {
                    b.Property<Guid>("OrganizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Game.Models.Entity.Team", b =>
                {
                    b.Property<Guid>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Game.Models.Entity.TeamDeck", b =>
                {
                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("DeckID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TeamID", "DeckID");

                    b.HasIndex("DeckID");

                    b.ToTable("TeamDecks");
                });

            modelBuilder.Entity("Game.Models.Entity.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Game.Models.Entity.UserTeam", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "TeamID");

                    b.HasIndex("TeamID");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("Game.Models.Entity.CardDeck", b =>
                {
                    b.HasOne("Game.Models.Entity.Card", null)
                        .WithMany("CardDecks")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Models.Entity.Deck", null)
                        .WithMany("CardDecks")
                        .HasForeignKey("DeckID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Game.Models.Entity.GameUser", b =>
                {
                    b.HasOne("Game.Models.Entity.Game", "Game")
                        .WithMany("GameUsers")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Models.Entity.User", "User")
                        .WithMany("GameUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Game.Models.Entity.GameUserAnswer", b =>
                {
                    b.HasOne("Game.Models.Entity.GameUser", null)
                        .WithMany("GameUserAnswers")
                        .HasForeignKey("GameUserUserID", "GameUserGameID");
                });

            modelBuilder.Entity("Game.Models.Entity.GameUserScore", b =>
                {
                    b.HasOne("Game.Models.Entity.Card", "Card")
                        .WithMany("GameUserScores")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Models.Entity.GameUserAnswer", "GameUserAnswer")
                        .WithMany("GameUserScores")
                        .HasForeignKey("GameUserAnswerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Models.Entity.GameUser", "GameUser")
                        .WithMany("GameUserScores")
                        .HasForeignKey("GameUserUserID", "GameUserGameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GameUser");

                    b.Navigation("GameUserAnswer");
                });

            modelBuilder.Entity("Game.Models.Entity.Team", b =>
                {
                    b.HasOne("Game.Models.Entity.Organization", "Organization")
                        .WithMany("Teams")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Game.Models.Entity.TeamDeck", b =>
                {
                    b.HasOne("Game.Models.Entity.Deck", null)
                        .WithMany("TeamDecks")
                        .HasForeignKey("DeckID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Models.Entity.Team", null)
                        .WithMany("TeamDecks")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Game.Models.Entity.UserTeam", b =>
                {
                    b.HasOne("Game.Models.Entity.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Game.Models.Entity.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Game.Models.Entity.Card", b =>
                {
                    b.Navigation("CardDecks");

                    b.Navigation("GameUserScores");
                });

            modelBuilder.Entity("Game.Models.Entity.Deck", b =>
                {
                    b.Navigation("CardDecks");

                    b.Navigation("TeamDecks");
                });

            modelBuilder.Entity("Game.Models.Entity.Game", b =>
                {
                    b.Navigation("GameUsers");
                });

            modelBuilder.Entity("Game.Models.Entity.GameUser", b =>
                {
                    b.Navigation("GameUserAnswers");

                    b.Navigation("GameUserScores");
                });

            modelBuilder.Entity("Game.Models.Entity.GameUserAnswer", b =>
                {
                    b.Navigation("GameUserScores");
                });

            modelBuilder.Entity("Game.Models.Entity.Organization", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Game.Models.Entity.Team", b =>
                {
                    b.Navigation("TeamDecks");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("Game.Models.Entity.User", b =>
                {
                    b.Navigation("GameUsers");

                    b.Navigation("UserTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
