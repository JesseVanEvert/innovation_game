# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'cbbe3a58-d05c-4319-b192-84c5cb97c872'

  # Function app name
  functionAppNameGame: 'ISGGameAPI'
  functionAppNameCDQT: 'ISGCardDeckQueueTrigger'
  functionAppNameUTGQT: 'ISGUserTeamOrganizationQueueTrigger'

  # Agent VM image name
  vmImageName: 'windows-2019'

  # Working Directory
  workingDirectoryGame: '$(System.DefaultWorkingDirectory)/Game/Game.API'
  workingDirectoryCDQT: '$(System.DefaultWorkingDirectory)/Game/CardDeck.QueueTrigger'
  workingDirectoryUTGQT: '$(System.DefaultWorkingDirectory)/Game/UserTeamOrg.QueueTrigger'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 6 Core sdk'
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
        includePreviewVersions: true

    - task: DotNetCoreCLI@2
      displayName: Build Game
      inputs:
        command: 'build'
        projects: |
          $(workingDirectoryGame)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/Game/publish_output --configuration Release

    - task: DotNetCoreCLI@2
      displayName: Build CDQT
      inputs:
        command: 'build'
        projects: |
          $(workingDirectoryCDQT)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/CDQT/publish_output --configuration Release

    - task: DotNetCoreCLI@2
      displayName: Build UTGQT
      inputs:
        command: 'build'
        projects: |
          $(workingDirectoryUTGQT)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/UTGQT/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive Game files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Game/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/Game/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - task: ArchiveFiles@2
      displayName: 'Archive CDQT files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/CDQT/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/CDQT/$(Build.BuildId).zip
        replaceExistingArchive: true

    - task: ArchiveFiles@2
      displayName: 'Archive UTGQT files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/UTGQT/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/UTGQT/$(Build.BuildId).zip
        replaceExistingArchive: true


    - publish: $(Build.ArtifactStagingDirectory)/Game/$(Build.BuildId).zip
      artifact: game

    - publish: $(Build.ArtifactStagingDirectory)/CDQT/$(Build.BuildId).zip
      artifact: CDQT

    - publish: $(Build.ArtifactStagingDirectory)/UTGQT/$(Build.BuildId).zip
      artifact: UTGQT

- stage: Test
  displayName: Run unit tests
  jobs:
    - job:
      displayName: unit tests job
      steps:
        - task: DotNetCoreCLI@2
          displayName: Run Visual studio tests
          inputs:
            command: test
            projects: '**/*.Testing*/*.csproj'
            arguments: '--configuration debug'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Test
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy game'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionAppGame
              appName: $(functionAppNameGame)
              package: '$(Pipeline.Workspace)/Game/$(Build.BuildId).zip'

          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy CDQT'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionAppCDQT
              appName: $(functionAppNameCDQT)
              package: '$(Pipeline.Workspace)/CDQT/$(Build.BuildId).zip'

          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy UTGQT'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionAppUTGQT
              appName: $(functionAppNameUTGQT)
              package: '$(Pipeline.Workspace)/UTGQT/$(Build.BuildId).zip'